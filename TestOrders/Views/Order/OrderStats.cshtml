@using Orders.Core.Models
@using Orders.Infrastructure.Data.Models
@using System.Globalization

@model List<OrderStatsViewModel>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    var from = DateTime.Today.ToString("yyyy-MM-dd");
    var to = DateTime.Now.ToString("yyyy-MM-dd");
    if (Model.Count != 0)
    {
        from = @Model.Min(x => x.LastStatusTime).ToString("yyyy-MM-dd");
        to = @Model.Max(x => x.LastStatusTime).ToString("yyyy-MM-dd");
    }
}
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <form asp-action="OrderStats" method="get" class="form pd-0">
                    <div class="row">
                        <div class="d-flex flex-row justify-content-end">
                            <span class="mr-3">
                                <i class="fas fa-square text-primary"></i> От: <input type="date" name="From" value="@from" />
                            </span>
                            <span class="mr-3">
                                <i class="fas fa-square text-gray"></i> До: <input type="date" name="To" value="@to" />
                            </span>
                            <span class="mr-3">
                                <input type="submit" value="Search" class="btn btn-block btn-outline-dark btn-sm" />
                            </span>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-body">
                        <div class="position-relative mb-4">
                            <div class="chartjs-size-monitor">
                                <div class="chartjs-size-monitor-expand">
                                    <div class=""></div>
                                </div>
                                <div class="chartjs-size-monitor-shrink">
                                    <div class="">
                                    </div>
                                </div>
                            </div>
                            <canvas id="myChart" height="200" width="618" style="display: block; width: 618px; height: 200px;" class="chartjs-render-monitor"></canvas>
                        </div>
                        <div class="d-flex flex-row justify-content-end">
                            <span class="mr-2">
                                <i class="fas fa-square text-danger"></i> Пицария "Топла Пица"
                            </span>
                            <span>
                                <i class="fas fa-square text-success" "></i> Севън Секъндс
                            </span>
                            <span class="mr-2">
                                <i class="fas fa-square text-primary"></i> Строежа
                            </span>

                        </div>
                    </div>
                </div>

                <div class="card">

                    <div class="card-body table-responsive p-0">
                        <table id="example1" class="table table-bordered table-striped dataTable dtr-inline" aria-describedby="example1_info">
                            <thead>
                                <tr>
                                    <th>Ресторант</th>
                                    <th>Цена</th>
                                    <th>Доставка</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                var restaurntGroups = Model
                                .GroupBy(x => new { x.RestaurantName })
                                .Select(x => new
                                {
                                RestaurantName = x.Key.RestaurantName,
                                DeliveryPrice = x.Sum(x => x.DeliveryPrice),
                                Price = x.Sum(x => x.Price)
                                })
                                .OrderBy(x => x.RestaurantName)
                                .ToList();
                                }

                                @foreach (var order in restaurntGroups)
                                {
                                <tr class="odd">
                                    <td>@order.RestaurantName</td>
                                    <td>@order.Price.ToString("F2") лв.</td>
                                    <td>@order.DeliveryPrice.ToString("F2") лв.</td>
                                </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <th></th>
                                    <th>
                                        @restaurntGroups.Sum(x => x.Price).ToString("F2") лв.
                                    </th>
                                    <th>@restaurntGroups.Sum(x => x.DeliveryPrice).ToString("F2") лв.</th>

                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>

            </div>

            <div class="col-lg-6">
                <div class="card">

                    <div class="card-body">
                        <div class="position-relative mb-4">
                            <div class="chartjs-size-monitor"><div class="chartjs-size-monitor-expand"><div class=""></div></div><div class="chartjs-size-monitor-shrink"><div class=""></div></div></div>
                            <canvas id="myChart1" height="200" style="display: block; width: 618px; height: 200px;" width="618" class="chartjs-render-monitor"></canvas>
                        </div>
                        <div class="d-flex flex-row justify-content-end">
                            <span class="mr-2">
                                <i class="fas fa-square text-primary"></i> This year
                            </span>
                            <span>
                                <i class="fas fa-square text-gray"></i> Last year
                            </span>
                        </div>
                    </div>
                </div>

                <div class="card">

                    <div class="card-body table-responsive p-0">
                        <table id="example1" class="table table-bordered table-striped dataTable dtr-inline" aria-describedby="example1_info">
                            <thead>
                                <tr>
                                    <th>Шофьор</th>
                                    <th>Цена</th>
                                    <th>Доставка</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                var driverGroups = Model
                                .GroupBy(x => new { x.DriverName })
                                .Select(x => new
                                {
                                DriverName = x.Key.DriverName,
                                DeliveryPrice = x.Sum(x => x.DeliveryPrice),
                                Price = x.Sum(x => x.Price)
                                })
                                .OrderBy(x => x.DriverName)
                                .ToList();
                                }
                                @foreach (var order in driverGroups)
                                {
                                <tr class="odd">
                                    <td>@order.DriverName</td>
                                    <td>@order.Price.ToString("F2") лв.</td>
                                    <td>@order.DeliveryPrice.ToString("F2") лв.</td>
                                </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <th></th>
                                    <th>@driverGroups.Sum(x => x.Price).ToString("F2") лв.</th>
                                    <th>@driverGroups.Sum(x => x.DeliveryPrice).ToString("F2") лв.</th>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>

        </div>

    </div>

</div>








<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
                                        @{
                                            var rest = restaurntGroups
                                            .GroupBy(x => x.RestaurantName)
                                            .Select(x => new
                                            {
                                                XLabels = x.Key,
                                                YValues = x.Sum(x => x.DeliveryPrice)
                                            }).ToList();

                                            var xLabels = rest.Select(x => x.XLabels).ToList();
                                            var yValues = rest.Select(x => x.YValues).ToList();

                                            var XLabels = Newtonsoft.Json.JsonConvert.SerializeObject(xLabels);
                                            var YValues = Newtonsoft.Json.JsonConvert.SerializeObject(yValues);
                                        }
    var barColors = ["red", "green","blue","orange","brown"];

    const data = {
      labels: @Html.Raw(XLabels),
      datasets: [{
        label: 'Оборот по ресторанти',
        backgroundColor: barColors,
        borderColor: 'rgb(255, 99, 132)',
        data: @Html.Raw(YValues),
      }]
    };

    const config = {
      type: 'bar',
      data: data,
      options: {}
    };
</script>

<script>
    const myChart = new Chart(
      document.getElementById('myChart'),
      config
    );
</script>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
                                        @{
                                            var driver = driverGroups
                                            .GroupBy(x => x.DriverName)
                                            .Select(x => new
                                            {
                                                XLabels = x.Key,
                                                YValues = x.Sum(x => x.DeliveryPrice)
                                            }).ToList();

                                            var driver_xLabels = driver.Select(x => x.XLabels).ToList();
                                            var driver_yValues = driver.Select(x => x.YValues).ToList();

                                            var driver_XLabels = Newtonsoft.Json.JsonConvert.SerializeObject(driver_xLabels);
                                            var driver_YValues = Newtonsoft.Json.JsonConvert.SerializeObject(driver_yValues);
                                        }
    var barColors1 = ["green","blue","orange","brown", "red"];

    const data1 = {
      labels: @Html.Raw(driver_XLabels),
      datasets: [{
        label: 'Оборот по шофьори',
        backgroundColor: barColors1,
        borderColor: 'rgb(125, 199, 132)',
        data: @Html.Raw(driver_YValues),
      }]
    };

    const config1 = {
      type: 'bar',
      data: data1,
      options: {}
    };
</script>

<script>
    const myChart1 = new Chart(
      document.getElementById('myChart1'),
      config1
    );
</script>
